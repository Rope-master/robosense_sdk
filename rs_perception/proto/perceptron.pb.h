// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perceptron.proto

#ifndef PROTOBUF_perceptron_2eproto__INCLUDED
#define PROTOBUF_perceptron_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace robosense {
namespace perception {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_perceptron_2eproto();
void protobuf_AssignDesc_perceptron_2eproto();
void protobuf_ShutdownFile_perceptron_2eproto();

class Point3;
class Perceptron;
class PerceptronSet;

enum Perceptron_Type {
  Perceptron_Type_UNKNOWN = 0,
  Perceptron_Type_PEDESTRIAN = 1,
  Perceptron_Type_BICYCLE = 2,
  Perceptron_Type_CAR = 3,
  Perceptron_Type_TRUCK_BUS = 4
};
bool Perceptron_Type_IsValid(int value);
const Perceptron_Type Perceptron_Type_Type_MIN = Perceptron_Type_UNKNOWN;
const Perceptron_Type Perceptron_Type_Type_MAX = Perceptron_Type_TRUCK_BUS;
const int Perceptron_Type_Type_ARRAYSIZE = Perceptron_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Perceptron_Type_descriptor();
inline const ::std::string& Perceptron_Type_Name(Perceptron_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Perceptron_Type_descriptor(), value);
}
inline bool Perceptron_Type_Parse(
    const ::std::string& name, Perceptron_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Perceptron_Type>(
    Perceptron_Type_descriptor(), name, value);
}
// ===================================================================

class Point3 : public ::google::protobuf::Message {
 public:
  Point3();
  virtual ~Point3();

  Point3(const Point3& from);

  inline Point3& operator=(const Point3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3& default_instance();

  void Swap(Point3* other);

  // implements Message ----------------------------------------------

  Point3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3& from);
  void MergeFrom(const Point3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:robosense.perception.Point3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_perceptron_2eproto();
  friend void protobuf_AssignDesc_perceptron_2eproto();
  friend void protobuf_ShutdownFile_perceptron_2eproto();

  void InitAsDefaultInstance();
  static Point3* default_instance_;
};
// -------------------------------------------------------------------

class Perceptron : public ::google::protobuf::Message {
 public:
  Perceptron();
  virtual ~Perceptron();

  Perceptron(const Perceptron& from);

  inline Perceptron& operator=(const Perceptron& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Perceptron& default_instance();

  void Swap(Perceptron* other);

  // implements Message ----------------------------------------------

  Perceptron* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Perceptron& from);
  void MergeFrom(const Perceptron& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Perceptron_Type Type;
  static const Type UNKNOWN = Perceptron_Type_UNKNOWN;
  static const Type PEDESTRIAN = Perceptron_Type_PEDESTRIAN;
  static const Type BICYCLE = Perceptron_Type_BICYCLE;
  static const Type CAR = Perceptron_Type_CAR;
  static const Type TRUCK_BUS = Perceptron_Type_TRUCK_BUS;
  static inline bool Type_IsValid(int value) {
    return Perceptron_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Perceptron_Type_Type_MIN;
  static const Type Type_MAX =
    Perceptron_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Perceptron_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Perceptron_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Perceptron_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Perceptron_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .robosense.perception.Point3 location = 3;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 3;
  inline const ::robosense::perception::Point3& location() const;
  inline ::robosense::perception::Point3* mutable_location();
  inline ::robosense::perception::Point3* release_location();
  inline void set_allocated_location(::robosense::perception::Point3* location);

  // optional float length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline float length() const;
  inline void set_length(float value);

  // optional float width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline float width() const;
  inline void set_width(float value);

  // optional float height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline float height() const;
  inline void set_height(float value);

  // optional .robosense.perception.Point3 direction = 7;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 7;
  inline const ::robosense::perception::Point3& direction() const;
  inline ::robosense::perception::Point3* mutable_direction();
  inline ::robosense::perception::Point3* release_direction();
  inline void set_allocated_direction(::robosense::perception::Point3* direction);

  // optional float yaw = 8;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 8;
  inline float yaw() const;
  inline void set_yaw(float value);

  // optional .robosense.perception.Point3 nearest_point = 9;
  inline bool has_nearest_point() const;
  inline void clear_nearest_point();
  static const int kNearestPointFieldNumber = 9;
  inline const ::robosense::perception::Point3& nearest_point() const;
  inline ::robosense::perception::Point3* mutable_nearest_point();
  inline ::robosense::perception::Point3* release_nearest_point();
  inline void set_allocated_nearest_point(::robosense::perception::Point3* nearest_point);

  // repeated .robosense.perception.Point3 box_corners = 10;
  inline int box_corners_size() const;
  inline void clear_box_corners();
  static const int kBoxCornersFieldNumber = 10;
  inline const ::robosense::perception::Point3& box_corners(int index) const;
  inline ::robosense::perception::Point3* mutable_box_corners(int index);
  inline ::robosense::perception::Point3* add_box_corners();
  inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
      box_corners() const;
  inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
      mutable_box_corners();

  // optional bool is_tracking_success = 11;
  inline bool has_is_tracking_success() const;
  inline void clear_is_tracking_success();
  static const int kIsTrackingSuccessFieldNumber = 11;
  inline bool is_tracking_success() const;
  inline void set_is_tracking_success(bool value);

  // optional .robosense.perception.Point3 velocity = 12;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 12;
  inline const ::robosense::perception::Point3& velocity() const;
  inline ::robosense::perception::Point3* mutable_velocity();
  inline ::robosense::perception::Point3* release_velocity();
  inline void set_allocated_velocity(::robosense::perception::Point3* velocity);

  // optional .robosense.perception.Point3 acceleration = 13;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 13;
  inline const ::robosense::perception::Point3& acceleration() const;
  inline ::robosense::perception::Point3* mutable_acceleration();
  inline ::robosense::perception::Point3* release_acceleration();
  inline void set_allocated_acceleration(::robosense::perception::Point3* acceleration);

  // optional float angular_velocity = 14;
  inline bool has_angular_velocity() const;
  inline void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 14;
  inline float angular_velocity() const;
  inline void set_angular_velocity(float value);

  // optional float association_score = 15;
  inline bool has_association_score() const;
  inline void clear_association_score();
  static const int kAssociationScoreFieldNumber = 15;
  inline float association_score() const;
  inline void set_association_score(float value);

  // optional float tracker_robustness = 16;
  inline bool has_tracker_robustness() const;
  inline void clear_tracker_robustness();
  static const int kTrackerRobustnessFieldNumber = 16;
  inline float tracker_robustness() const;
  inline void set_tracker_robustness(float value);

  // optional double tracking_time = 17;
  inline bool has_tracking_time() const;
  inline void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 17;
  inline double tracking_time() const;
  inline void set_tracking_time(double value);

  // optional double visible_tracking_time = 18;
  inline bool has_visible_tracking_time() const;
  inline void clear_visible_tracking_time();
  static const int kVisibleTrackingTimeFieldNumber = 18;
  inline double visible_tracking_time() const;
  inline void set_visible_tracking_time(double value);

  // repeated .robosense.perception.Point3 history_velocity = 19;
  inline int history_velocity_size() const;
  inline void clear_history_velocity();
  static const int kHistoryVelocityFieldNumber = 19;
  inline const ::robosense::perception::Point3& history_velocity(int index) const;
  inline ::robosense::perception::Point3* mutable_history_velocity(int index);
  inline ::robosense::perception::Point3* add_history_velocity();
  inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
      history_velocity() const;
  inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
      mutable_history_velocity();

  // optional .robosense.perception.Perceptron.Type track_type = 20;
  inline bool has_track_type() const;
  inline void clear_track_type();
  static const int kTrackTypeFieldNumber = 20;
  inline ::robosense::perception::Perceptron_Type track_type() const;
  inline void set_track_type(::robosense::perception::Perceptron_Type value);

  // optional .robosense.perception.Perceptron.Type type = 21;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 21;
  inline ::robosense::perception::Perceptron_Type type() const;
  inline void set_type(::robosense::perception::Perceptron_Type value);

  // optional float type_confidence = 22;
  inline bool has_type_confidence() const;
  inline void clear_type_confidence();
  static const int kTypeConfidenceFieldNumber = 22;
  inline float type_confidence() const;
  inline void set_type_confidence(float value);

  // optional bool is_background = 23;
  inline bool has_is_background() const;
  inline void clear_is_background();
  static const int kIsBackgroundFieldNumber = 23;
  inline bool is_background() const;
  inline void set_is_background(bool value);

  // repeated .robosense.perception.Point3 polygon_point = 24;
  inline int polygon_point_size() const;
  inline void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 24;
  inline const ::robosense::perception::Point3& polygon_point(int index) const;
  inline ::robosense::perception::Point3* mutable_polygon_point(int index);
  inline ::robosense::perception::Point3* add_polygon_point();
  inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
      polygon_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
      mutable_polygon_point();

  // repeated .robosense.perception.Point3 trajectory = 25;
  inline int trajectory_size() const;
  inline void clear_trajectory();
  static const int kTrajectoryFieldNumber = 25;
  inline const ::robosense::perception::Point3& trajectory(int index) const;
  inline ::robosense::perception::Point3* mutable_trajectory(int index);
  inline ::robosense::perception::Point3* add_trajectory();
  inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
      trajectory() const;
  inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
      mutable_trajectory();

  // @@protoc_insertion_point(class_scope:robosense.perception.Perceptron)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_nearest_point();
  inline void clear_has_nearest_point();
  inline void set_has_is_tracking_success();
  inline void clear_has_is_tracking_success();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();
  inline void set_has_association_score();
  inline void clear_has_association_score();
  inline void set_has_tracker_robustness();
  inline void clear_has_tracker_robustness();
  inline void set_has_tracking_time();
  inline void clear_has_tracking_time();
  inline void set_has_visible_tracking_time();
  inline void clear_has_visible_tracking_time();
  inline void set_has_track_type();
  inline void clear_has_track_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_type_confidence();
  inline void clear_has_type_confidence();
  inline void set_has_is_background();
  inline void clear_has_is_background();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double timestamp_;
  ::robosense::perception::Point3* location_;
  ::google::protobuf::int32 id_;
  float length_;
  float width_;
  float height_;
  ::robosense::perception::Point3* direction_;
  ::robosense::perception::Point3* nearest_point_;
  ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 > box_corners_;
  float yaw_;
  float angular_velocity_;
  ::robosense::perception::Point3* velocity_;
  ::robosense::perception::Point3* acceleration_;
  float association_score_;
  float tracker_robustness_;
  double tracking_time_;
  double visible_tracking_time_;
  bool is_tracking_success_;
  bool is_background_;
  int track_type_;
  ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 > history_velocity_;
  int type_;
  float type_confidence_;
  ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 > polygon_point_;
  ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 > trajectory_;
  friend void  protobuf_AddDesc_perceptron_2eproto();
  friend void protobuf_AssignDesc_perceptron_2eproto();
  friend void protobuf_ShutdownFile_perceptron_2eproto();

  void InitAsDefaultInstance();
  static Perceptron* default_instance_;
};
// -------------------------------------------------------------------

class PerceptronSet : public ::google::protobuf::Message {
 public:
  PerceptronSet();
  virtual ~PerceptronSet();

  PerceptronSet(const PerceptronSet& from);

  inline PerceptronSet& operator=(const PerceptronSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptronSet& default_instance();

  void Swap(PerceptronSet* other);

  // implements Message ----------------------------------------------

  PerceptronSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerceptronSet& from);
  void MergeFrom(const PerceptronSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robosense.perception.Perceptron perceptron = 1;
  inline int perceptron_size() const;
  inline void clear_perceptron();
  static const int kPerceptronFieldNumber = 1;
  inline const ::robosense::perception::Perceptron& perceptron(int index) const;
  inline ::robosense::perception::Perceptron* mutable_perceptron(int index);
  inline ::robosense::perception::Perceptron* add_perceptron();
  inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Perceptron >&
      perceptron() const;
  inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Perceptron >*
      mutable_perceptron();

  // @@protoc_insertion_point(class_scope:robosense.perception.PerceptronSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robosense::perception::Perceptron > perceptron_;
  friend void  protobuf_AddDesc_perceptron_2eproto();
  friend void protobuf_AssignDesc_perceptron_2eproto();
  friend void protobuf_ShutdownFile_perceptron_2eproto();

  void InitAsDefaultInstance();
  static PerceptronSet* default_instance_;
};
// ===================================================================


// ===================================================================

// Point3

// optional float x = 1;
inline bool Point3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point3::x() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Point3.x)
  return x_;
}
inline void Point3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Point3.x)
}

// optional float y = 2;
inline bool Point3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point3::y() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Point3.y)
  return y_;
}
inline void Point3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Point3.y)
}

// optional float z = 3;
inline bool Point3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point3::z() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Point3.z)
  return z_;
}
inline void Point3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Point3.z)
}

// -------------------------------------------------------------------

// Perceptron

// optional double timestamp = 1;
inline bool Perceptron::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Perceptron::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Perceptron::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Perceptron::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Perceptron::timestamp() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.timestamp)
  return timestamp_;
}
inline void Perceptron::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.timestamp)
}

// optional int32 id = 2;
inline bool Perceptron::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Perceptron::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Perceptron::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Perceptron::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Perceptron::id() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.id)
  return id_;
}
inline void Perceptron::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.id)
}

// optional .robosense.perception.Point3 location = 3;
inline bool Perceptron::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Perceptron::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Perceptron::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Perceptron::clear_location() {
  if (location_ != NULL) location_->::robosense::perception::Point3::Clear();
  clear_has_location();
}
inline const ::robosense::perception::Point3& Perceptron::location() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::robosense::perception::Point3* Perceptron::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::robosense::perception::Point3;
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.location)
  return location_;
}
inline ::robosense::perception::Point3* Perceptron::release_location() {
  clear_has_location();
  ::robosense::perception::Point3* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Perceptron::set_allocated_location(::robosense::perception::Point3* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:robosense.perception.Perceptron.location)
}

// optional float length = 4;
inline bool Perceptron::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Perceptron::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Perceptron::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Perceptron::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float Perceptron::length() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.length)
  return length_;
}
inline void Perceptron::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.length)
}

// optional float width = 5;
inline bool Perceptron::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Perceptron::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Perceptron::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Perceptron::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Perceptron::width() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.width)
  return width_;
}
inline void Perceptron::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.width)
}

// optional float height = 6;
inline bool Perceptron::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Perceptron::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Perceptron::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Perceptron::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Perceptron::height() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.height)
  return height_;
}
inline void Perceptron::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.height)
}

// optional .robosense.perception.Point3 direction = 7;
inline bool Perceptron::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Perceptron::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Perceptron::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Perceptron::clear_direction() {
  if (direction_ != NULL) direction_->::robosense::perception::Point3::Clear();
  clear_has_direction();
}
inline const ::robosense::perception::Point3& Perceptron::direction() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::robosense::perception::Point3* Perceptron::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::robosense::perception::Point3;
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.direction)
  return direction_;
}
inline ::robosense::perception::Point3* Perceptron::release_direction() {
  clear_has_direction();
  ::robosense::perception::Point3* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void Perceptron::set_allocated_direction(::robosense::perception::Point3* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:robosense.perception.Perceptron.direction)
}

// optional float yaw = 8;
inline bool Perceptron::has_yaw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Perceptron::set_has_yaw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Perceptron::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Perceptron::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Perceptron::yaw() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.yaw)
  return yaw_;
}
inline void Perceptron::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.yaw)
}

// optional .robosense.perception.Point3 nearest_point = 9;
inline bool Perceptron::has_nearest_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Perceptron::set_has_nearest_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Perceptron::clear_has_nearest_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Perceptron::clear_nearest_point() {
  if (nearest_point_ != NULL) nearest_point_->::robosense::perception::Point3::Clear();
  clear_has_nearest_point();
}
inline const ::robosense::perception::Point3& Perceptron::nearest_point() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.nearest_point)
  return nearest_point_ != NULL ? *nearest_point_ : *default_instance_->nearest_point_;
}
inline ::robosense::perception::Point3* Perceptron::mutable_nearest_point() {
  set_has_nearest_point();
  if (nearest_point_ == NULL) nearest_point_ = new ::robosense::perception::Point3;
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.nearest_point)
  return nearest_point_;
}
inline ::robosense::perception::Point3* Perceptron::release_nearest_point() {
  clear_has_nearest_point();
  ::robosense::perception::Point3* temp = nearest_point_;
  nearest_point_ = NULL;
  return temp;
}
inline void Perceptron::set_allocated_nearest_point(::robosense::perception::Point3* nearest_point) {
  delete nearest_point_;
  nearest_point_ = nearest_point;
  if (nearest_point) {
    set_has_nearest_point();
  } else {
    clear_has_nearest_point();
  }
  // @@protoc_insertion_point(field_set_allocated:robosense.perception.Perceptron.nearest_point)
}

// repeated .robosense.perception.Point3 box_corners = 10;
inline int Perceptron::box_corners_size() const {
  return box_corners_.size();
}
inline void Perceptron::clear_box_corners() {
  box_corners_.Clear();
}
inline const ::robosense::perception::Point3& Perceptron::box_corners(int index) const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.box_corners)
  return box_corners_.Get(index);
}
inline ::robosense::perception::Point3* Perceptron::mutable_box_corners(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.box_corners)
  return box_corners_.Mutable(index);
}
inline ::robosense::perception::Point3* Perceptron::add_box_corners() {
  // @@protoc_insertion_point(field_add:robosense.perception.Perceptron.box_corners)
  return box_corners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
Perceptron::box_corners() const {
  // @@protoc_insertion_point(field_list:robosense.perception.Perceptron.box_corners)
  return box_corners_;
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
Perceptron::mutable_box_corners() {
  // @@protoc_insertion_point(field_mutable_list:robosense.perception.Perceptron.box_corners)
  return &box_corners_;
}

// optional bool is_tracking_success = 11;
inline bool Perceptron::has_is_tracking_success() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Perceptron::set_has_is_tracking_success() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Perceptron::clear_has_is_tracking_success() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Perceptron::clear_is_tracking_success() {
  is_tracking_success_ = false;
  clear_has_is_tracking_success();
}
inline bool Perceptron::is_tracking_success() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.is_tracking_success)
  return is_tracking_success_;
}
inline void Perceptron::set_is_tracking_success(bool value) {
  set_has_is_tracking_success();
  is_tracking_success_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.is_tracking_success)
}

// optional .robosense.perception.Point3 velocity = 12;
inline bool Perceptron::has_velocity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Perceptron::set_has_velocity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Perceptron::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Perceptron::clear_velocity() {
  if (velocity_ != NULL) velocity_->::robosense::perception::Point3::Clear();
  clear_has_velocity();
}
inline const ::robosense::perception::Point3& Perceptron::velocity() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::robosense::perception::Point3* Perceptron::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::robosense::perception::Point3;
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.velocity)
  return velocity_;
}
inline ::robosense::perception::Point3* Perceptron::release_velocity() {
  clear_has_velocity();
  ::robosense::perception::Point3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Perceptron::set_allocated_velocity(::robosense::perception::Point3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:robosense.perception.Perceptron.velocity)
}

// optional .robosense.perception.Point3 acceleration = 13;
inline bool Perceptron::has_acceleration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Perceptron::set_has_acceleration() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Perceptron::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Perceptron::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::robosense::perception::Point3::Clear();
  clear_has_acceleration();
}
inline const ::robosense::perception::Point3& Perceptron::acceleration() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::robosense::perception::Point3* Perceptron::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) acceleration_ = new ::robosense::perception::Point3;
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.acceleration)
  return acceleration_;
}
inline ::robosense::perception::Point3* Perceptron::release_acceleration() {
  clear_has_acceleration();
  ::robosense::perception::Point3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void Perceptron::set_allocated_acceleration(::robosense::perception::Point3* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:robosense.perception.Perceptron.acceleration)
}

// optional float angular_velocity = 14;
inline bool Perceptron::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Perceptron::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Perceptron::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Perceptron::clear_angular_velocity() {
  angular_velocity_ = 0;
  clear_has_angular_velocity();
}
inline float Perceptron::angular_velocity() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.angular_velocity)
  return angular_velocity_;
}
inline void Perceptron::set_angular_velocity(float value) {
  set_has_angular_velocity();
  angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.angular_velocity)
}

// optional float association_score = 15;
inline bool Perceptron::has_association_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Perceptron::set_has_association_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Perceptron::clear_has_association_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Perceptron::clear_association_score() {
  association_score_ = 0;
  clear_has_association_score();
}
inline float Perceptron::association_score() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.association_score)
  return association_score_;
}
inline void Perceptron::set_association_score(float value) {
  set_has_association_score();
  association_score_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.association_score)
}

// optional float tracker_robustness = 16;
inline bool Perceptron::has_tracker_robustness() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Perceptron::set_has_tracker_robustness() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Perceptron::clear_has_tracker_robustness() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Perceptron::clear_tracker_robustness() {
  tracker_robustness_ = 0;
  clear_has_tracker_robustness();
}
inline float Perceptron::tracker_robustness() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.tracker_robustness)
  return tracker_robustness_;
}
inline void Perceptron::set_tracker_robustness(float value) {
  set_has_tracker_robustness();
  tracker_robustness_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.tracker_robustness)
}

// optional double tracking_time = 17;
inline bool Perceptron::has_tracking_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Perceptron::set_has_tracking_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Perceptron::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Perceptron::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double Perceptron::tracking_time() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.tracking_time)
  return tracking_time_;
}
inline void Perceptron::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.tracking_time)
}

// optional double visible_tracking_time = 18;
inline bool Perceptron::has_visible_tracking_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Perceptron::set_has_visible_tracking_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Perceptron::clear_has_visible_tracking_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Perceptron::clear_visible_tracking_time() {
  visible_tracking_time_ = 0;
  clear_has_visible_tracking_time();
}
inline double Perceptron::visible_tracking_time() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.visible_tracking_time)
  return visible_tracking_time_;
}
inline void Perceptron::set_visible_tracking_time(double value) {
  set_has_visible_tracking_time();
  visible_tracking_time_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.visible_tracking_time)
}

// repeated .robosense.perception.Point3 history_velocity = 19;
inline int Perceptron::history_velocity_size() const {
  return history_velocity_.size();
}
inline void Perceptron::clear_history_velocity() {
  history_velocity_.Clear();
}
inline const ::robosense::perception::Point3& Perceptron::history_velocity(int index) const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.history_velocity)
  return history_velocity_.Get(index);
}
inline ::robosense::perception::Point3* Perceptron::mutable_history_velocity(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.history_velocity)
  return history_velocity_.Mutable(index);
}
inline ::robosense::perception::Point3* Perceptron::add_history_velocity() {
  // @@protoc_insertion_point(field_add:robosense.perception.Perceptron.history_velocity)
  return history_velocity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
Perceptron::history_velocity() const {
  // @@protoc_insertion_point(field_list:robosense.perception.Perceptron.history_velocity)
  return history_velocity_;
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
Perceptron::mutable_history_velocity() {
  // @@protoc_insertion_point(field_mutable_list:robosense.perception.Perceptron.history_velocity)
  return &history_velocity_;
}

// optional .robosense.perception.Perceptron.Type track_type = 20;
inline bool Perceptron::has_track_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Perceptron::set_has_track_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Perceptron::clear_has_track_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Perceptron::clear_track_type() {
  track_type_ = 0;
  clear_has_track_type();
}
inline ::robosense::perception::Perceptron_Type Perceptron::track_type() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.track_type)
  return static_cast< ::robosense::perception::Perceptron_Type >(track_type_);
}
inline void Perceptron::set_track_type(::robosense::perception::Perceptron_Type value) {
  assert(::robosense::perception::Perceptron_Type_IsValid(value));
  set_has_track_type();
  track_type_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.track_type)
}

// optional .robosense.perception.Perceptron.Type type = 21;
inline bool Perceptron::has_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Perceptron::set_has_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Perceptron::clear_has_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Perceptron::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::robosense::perception::Perceptron_Type Perceptron::type() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.type)
  return static_cast< ::robosense::perception::Perceptron_Type >(type_);
}
inline void Perceptron::set_type(::robosense::perception::Perceptron_Type value) {
  assert(::robosense::perception::Perceptron_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.type)
}

// optional float type_confidence = 22;
inline bool Perceptron::has_type_confidence() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Perceptron::set_has_type_confidence() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Perceptron::clear_has_type_confidence() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Perceptron::clear_type_confidence() {
  type_confidence_ = 0;
  clear_has_type_confidence();
}
inline float Perceptron::type_confidence() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.type_confidence)
  return type_confidence_;
}
inline void Perceptron::set_type_confidence(float value) {
  set_has_type_confidence();
  type_confidence_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.type_confidence)
}

// optional bool is_background = 23;
inline bool Perceptron::has_is_background() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Perceptron::set_has_is_background() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Perceptron::clear_has_is_background() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Perceptron::clear_is_background() {
  is_background_ = false;
  clear_has_is_background();
}
inline bool Perceptron::is_background() const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.is_background)
  return is_background_;
}
inline void Perceptron::set_is_background(bool value) {
  set_has_is_background();
  is_background_ = value;
  // @@protoc_insertion_point(field_set:robosense.perception.Perceptron.is_background)
}

// repeated .robosense.perception.Point3 polygon_point = 24;
inline int Perceptron::polygon_point_size() const {
  return polygon_point_.size();
}
inline void Perceptron::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::robosense::perception::Point3& Perceptron::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.polygon_point)
  return polygon_point_.Get(index);
}
inline ::robosense::perception::Point3* Perceptron::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::robosense::perception::Point3* Perceptron::add_polygon_point() {
  // @@protoc_insertion_point(field_add:robosense.perception.Perceptron.polygon_point)
  return polygon_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
Perceptron::polygon_point() const {
  // @@protoc_insertion_point(field_list:robosense.perception.Perceptron.polygon_point)
  return polygon_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
Perceptron::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:robosense.perception.Perceptron.polygon_point)
  return &polygon_point_;
}

// repeated .robosense.perception.Point3 trajectory = 25;
inline int Perceptron::trajectory_size() const {
  return trajectory_.size();
}
inline void Perceptron::clear_trajectory() {
  trajectory_.Clear();
}
inline const ::robosense::perception::Point3& Perceptron::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:robosense.perception.Perceptron.trajectory)
  return trajectory_.Get(index);
}
inline ::robosense::perception::Point3* Perceptron::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.perception.Perceptron.trajectory)
  return trajectory_.Mutable(index);
}
inline ::robosense::perception::Point3* Perceptron::add_trajectory() {
  // @@protoc_insertion_point(field_add:robosense.perception.Perceptron.trajectory)
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >&
Perceptron::trajectory() const {
  // @@protoc_insertion_point(field_list:robosense.perception.Perceptron.trajectory)
  return trajectory_;
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Point3 >*
Perceptron::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:robosense.perception.Perceptron.trajectory)
  return &trajectory_;
}

// -------------------------------------------------------------------

// PerceptronSet

// repeated .robosense.perception.Perceptron perceptron = 1;
inline int PerceptronSet::perceptron_size() const {
  return perceptron_.size();
}
inline void PerceptronSet::clear_perceptron() {
  perceptron_.Clear();
}
inline const ::robosense::perception::Perceptron& PerceptronSet::perceptron(int index) const {
  // @@protoc_insertion_point(field_get:robosense.perception.PerceptronSet.perceptron)
  return perceptron_.Get(index);
}
inline ::robosense::perception::Perceptron* PerceptronSet::mutable_perceptron(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.perception.PerceptronSet.perceptron)
  return perceptron_.Mutable(index);
}
inline ::robosense::perception::Perceptron* PerceptronSet::add_perceptron() {
  // @@protoc_insertion_point(field_add:robosense.perception.PerceptronSet.perceptron)
  return perceptron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::perception::Perceptron >&
PerceptronSet::perceptron() const {
  // @@protoc_insertion_point(field_list:robosense.perception.PerceptronSet.perceptron)
  return perceptron_;
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::perception::Perceptron >*
PerceptronSet::mutable_perceptron() {
  // @@protoc_insertion_point(field_mutable_list:robosense.perception.PerceptronSet.perceptron)
  return &perceptron_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace robosense

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::robosense::perception::Perceptron_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robosense::perception::Perceptron_Type>() {
  return ::robosense::perception::Perceptron_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perceptron_2eproto__INCLUDED
