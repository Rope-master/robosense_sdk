// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perceptron.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perceptron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace robosense {
namespace perception {

namespace {

const ::google::protobuf::Descriptor* Point3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Perceptron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Perceptron_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Perceptron_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PerceptronSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerceptronSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perceptron_2eproto() {
  protobuf_AddDesc_perceptron_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perceptron.proto");
  GOOGLE_CHECK(file != NULL);
  Point3_descriptor_ = file->message_type(0);
  static const int Point3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, z_),
  };
  Point3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point3_descriptor_,
      Point3::default_instance_,
      Point3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point3));
  Perceptron_descriptor_ = file->message_type(1);
  static const int Perceptron_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, nearest_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, box_corners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, is_tracking_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, association_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, tracker_robustness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, tracking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, visible_tracking_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, history_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, track_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, type_confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, is_background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, polygon_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, trajectory_),
  };
  Perceptron_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Perceptron_descriptor_,
      Perceptron::default_instance_,
      Perceptron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Perceptron, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Perceptron));
  Perceptron_Type_descriptor_ = Perceptron_descriptor_->enum_type(0);
  PerceptronSet_descriptor_ = file->message_type(2);
  static const int PerceptronSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptronSet, perceptron_),
  };
  PerceptronSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerceptronSet_descriptor_,
      PerceptronSet::default_instance_,
      PerceptronSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptronSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptronSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerceptronSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perceptron_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point3_descriptor_, &Point3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Perceptron_descriptor_, &Perceptron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerceptronSet_descriptor_, &PerceptronSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perceptron_2eproto() {
  delete Point3::default_instance_;
  delete Point3_reflection_;
  delete Perceptron::default_instance_;
  delete Perceptron_reflection_;
  delete PerceptronSet::default_instance_;
  delete PerceptronSet_reflection_;
}

void protobuf_AddDesc_perceptron_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020perceptron.proto\022\024robosense.perception"
    "\")\n\006Point3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 "
    "\001(\002\"\301\007\n\nPerceptron\022\021\n\ttimestamp\030\001 \001(\001\022\n\n"
    "\002id\030\002 \001(\005\022.\n\010location\030\003 \001(\0132\034.robosense."
    "perception.Point3\022\016\n\006length\030\004 \001(\002\022\r\n\005wid"
    "th\030\005 \001(\002\022\016\n\006height\030\006 \001(\002\022/\n\tdirection\030\007 "
    "\001(\0132\034.robosense.perception.Point3\022\013\n\003yaw"
    "\030\010 \001(\002\0223\n\rnearest_point\030\t \001(\0132\034.robosens"
    "e.perception.Point3\0221\n\013box_corners\030\n \003(\013"
    "2\034.robosense.perception.Point3\022\033\n\023is_tra"
    "cking_success\030\013 \001(\010\022.\n\010velocity\030\014 \001(\0132\034."
    "robosense.perception.Point3\0222\n\014accelerat"
    "ion\030\r \001(\0132\034.robosense.perception.Point3\022"
    "\030\n\020angular_velocity\030\016 \001(\002\022\031\n\021association"
    "_score\030\017 \001(\002\022\032\n\022tracker_robustness\030\020 \001(\002"
    "\022\025\n\rtracking_time\030\021 \001(\001\022\035\n\025visible_track"
    "ing_time\030\022 \001(\001\0226\n\020history_velocity\030\023 \003(\013"
    "2\034.robosense.perception.Point3\0229\n\ntrack_"
    "type\030\024 \001(\0162%.robosense.perception.Percep"
    "tron.Type\0223\n\004type\030\025 \001(\0162%.robosense.perc"
    "eption.Perceptron.Type\022\027\n\017type_confidenc"
    "e\030\026 \001(\002\022\025\n\ris_background\030\027 \001(\010\0223\n\rpolygo"
    "n_point\030\030 \003(\0132\034.robosense.perception.Poi"
    "nt3\0220\n\ntrajectory\030\031 \003(\0132\034.robosense.perc"
    "eption.Point3\"H\n\004Type\022\013\n\007UNKNOWN\020\000\022\016\n\nPE"
    "DESTRIAN\020\001\022\013\n\007BICYCLE\020\002\022\007\n\003CAR\020\003\022\r\n\tTRUC"
    "K_BUS\020\004\"E\n\rPerceptronSet\0224\n\nperceptron\030\001"
    " \003(\0132 .robosense.perception.Perceptron", 1118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perceptron.proto", &protobuf_RegisterTypes);
  Point3::default_instance_ = new Point3();
  Perceptron::default_instance_ = new Perceptron();
  PerceptronSet::default_instance_ = new PerceptronSet();
  Point3::default_instance_->InitAsDefaultInstance();
  Perceptron::default_instance_->InitAsDefaultInstance();
  PerceptronSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perceptron_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perceptron_2eproto {
  StaticDescriptorInitializer_perceptron_2eproto() {
    protobuf_AddDesc_perceptron_2eproto();
  }
} static_descriptor_initializer_perceptron_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point3::kXFieldNumber;
const int Point3::kYFieldNumber;
const int Point3::kZFieldNumber;
#endif  // !_MSC_VER

Point3::Point3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosense.perception.Point3)
}

void Point3::InitAsDefaultInstance() {
}

Point3::Point3(const Point3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robosense.perception.Point3)
}

void Point3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point3::~Point3() {
  // @@protoc_insertion_point(destructor:robosense.perception.Point3)
  SharedDtor();
}

void Point3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3_descriptor_;
}

const Point3& Point3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perceptron_2eproto();
  return *default_instance_;
}

Point3* Point3::default_instance_ = NULL;

Point3* Point3::New() const {
  return new Point3;
}

void Point3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosense.perception.Point3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosense.perception.Point3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosense.perception.Point3)
  return false;
#undef DO_
}

void Point3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosense.perception.Point3)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robosense.perception.Point3)
}

::google::protobuf::uint8* Point3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robosense.perception.Point3)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosense.perception.Point3)
  return target;
}

int Point3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point3::MergeFrom(const Point3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3::CopyFrom(const Point3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3::IsInitialized() const {

  return true;
}

void Point3::Swap(Point3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3_descriptor_;
  metadata.reflection = Point3_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Perceptron_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Perceptron_Type_descriptor_;
}
bool Perceptron_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Perceptron_Type Perceptron::UNKNOWN;
const Perceptron_Type Perceptron::PEDESTRIAN;
const Perceptron_Type Perceptron::BICYCLE;
const Perceptron_Type Perceptron::CAR;
const Perceptron_Type Perceptron::TRUCK_BUS;
const Perceptron_Type Perceptron::Type_MIN;
const Perceptron_Type Perceptron::Type_MAX;
const int Perceptron::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Perceptron::kTimestampFieldNumber;
const int Perceptron::kIdFieldNumber;
const int Perceptron::kLocationFieldNumber;
const int Perceptron::kLengthFieldNumber;
const int Perceptron::kWidthFieldNumber;
const int Perceptron::kHeightFieldNumber;
const int Perceptron::kDirectionFieldNumber;
const int Perceptron::kYawFieldNumber;
const int Perceptron::kNearestPointFieldNumber;
const int Perceptron::kBoxCornersFieldNumber;
const int Perceptron::kIsTrackingSuccessFieldNumber;
const int Perceptron::kVelocityFieldNumber;
const int Perceptron::kAccelerationFieldNumber;
const int Perceptron::kAngularVelocityFieldNumber;
const int Perceptron::kAssociationScoreFieldNumber;
const int Perceptron::kTrackerRobustnessFieldNumber;
const int Perceptron::kTrackingTimeFieldNumber;
const int Perceptron::kVisibleTrackingTimeFieldNumber;
const int Perceptron::kHistoryVelocityFieldNumber;
const int Perceptron::kTrackTypeFieldNumber;
const int Perceptron::kTypeFieldNumber;
const int Perceptron::kTypeConfidenceFieldNumber;
const int Perceptron::kIsBackgroundFieldNumber;
const int Perceptron::kPolygonPointFieldNumber;
const int Perceptron::kTrajectoryFieldNumber;
#endif  // !_MSC_VER

Perceptron::Perceptron()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosense.perception.Perceptron)
}

void Perceptron::InitAsDefaultInstance() {
  location_ = const_cast< ::robosense::perception::Point3*>(&::robosense::perception::Point3::default_instance());
  direction_ = const_cast< ::robosense::perception::Point3*>(&::robosense::perception::Point3::default_instance());
  nearest_point_ = const_cast< ::robosense::perception::Point3*>(&::robosense::perception::Point3::default_instance());
  velocity_ = const_cast< ::robosense::perception::Point3*>(&::robosense::perception::Point3::default_instance());
  acceleration_ = const_cast< ::robosense::perception::Point3*>(&::robosense::perception::Point3::default_instance());
}

Perceptron::Perceptron(const Perceptron& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robosense.perception.Perceptron)
}

void Perceptron::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  id_ = 0;
  location_ = NULL;
  length_ = 0;
  width_ = 0;
  height_ = 0;
  direction_ = NULL;
  yaw_ = 0;
  nearest_point_ = NULL;
  is_tracking_success_ = false;
  velocity_ = NULL;
  acceleration_ = NULL;
  angular_velocity_ = 0;
  association_score_ = 0;
  tracker_robustness_ = 0;
  tracking_time_ = 0;
  visible_tracking_time_ = 0;
  track_type_ = 0;
  type_ = 0;
  type_confidence_ = 0;
  is_background_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Perceptron::~Perceptron() {
  // @@protoc_insertion_point(destructor:robosense.perception.Perceptron)
  SharedDtor();
}

void Perceptron::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete direction_;
    delete nearest_point_;
    delete velocity_;
    delete acceleration_;
  }
}

void Perceptron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Perceptron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Perceptron_descriptor_;
}

const Perceptron& Perceptron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perceptron_2eproto();
  return *default_instance_;
}

Perceptron* Perceptron::default_instance_ = NULL;

Perceptron* Perceptron::New() const {
  return new Perceptron;
}

void Perceptron::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Perceptron*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, height_);
    timestamp_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::robosense::perception::Point3::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::robosense::perception::Point3::Clear();
    }
    yaw_ = 0;
  }
  if (_has_bits_[8 / 32] & 64768) {
    ZR_(association_score_, tracker_robustness_);
    if (has_nearest_point()) {
      if (nearest_point_ != NULL) nearest_point_->::robosense::perception::Point3::Clear();
    }
    is_tracking_success_ = false;
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::robosense::perception::Point3::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::robosense::perception::Point3::Clear();
    }
    angular_velocity_ = 0;
  }
  if (_has_bits_[16 / 32] & 8060928) {
    ZR_(tracking_time_, visible_tracking_time_);
    ZR_(is_background_, track_type_);
    ZR_(type_, type_confidence_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  box_corners_.Clear();
  history_velocity_.Clear();
  polygon_point_.Clear();
  trajectory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Perceptron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosense.perception.Perceptron)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .robosense.perception.Point3 location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }

      // optional float length = 4;
      case 4: {
        if (tag == 37) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_width;
        break;
      }

      // optional float width = 5;
      case 5: {
        if (tag == 45) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_height;
        break;
      }

      // optional float height = 6;
      case 6: {
        if (tag == 53) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_direction;
        break;
      }

      // optional .robosense.perception.Point3 direction = 7;
      case 7: {
        if (tag == 58) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_yaw;
        break;
      }

      // optional float yaw = 8;
      case 8: {
        if (tag == 69) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_nearest_point;
        break;
      }

      // optional .robosense.perception.Point3 nearest_point = 9;
      case 9: {
        if (tag == 74) {
         parse_nearest_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nearest_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_box_corners;
        break;
      }

      // repeated .robosense.perception.Point3 box_corners = 10;
      case 10: {
        if (tag == 82) {
         parse_box_corners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_box_corners()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_box_corners;
        if (input->ExpectTag(88)) goto parse_is_tracking_success;
        break;
      }

      // optional bool is_tracking_success = 11;
      case 11: {
        if (tag == 88) {
         parse_is_tracking_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tracking_success_)));
          set_has_is_tracking_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_velocity;
        break;
      }

      // optional .robosense.perception.Point3 velocity = 12;
      case 12: {
        if (tag == 98) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_acceleration;
        break;
      }

      // optional .robosense.perception.Point3 acceleration = 13;
      case 13: {
        if (tag == 106) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_angular_velocity;
        break;
      }

      // optional float angular_velocity = 14;
      case 14: {
        if (tag == 117) {
         parse_angular_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_velocity_)));
          set_has_angular_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_association_score;
        break;
      }

      // optional float association_score = 15;
      case 15: {
        if (tag == 125) {
         parse_association_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &association_score_)));
          set_has_association_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_tracker_robustness;
        break;
      }

      // optional float tracker_robustness = 16;
      case 16: {
        if (tag == 133) {
         parse_tracker_robustness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracker_robustness_)));
          set_has_tracker_robustness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 17;
      case 17: {
        if (tag == 137) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
          set_has_tracking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_visible_tracking_time;
        break;
      }

      // optional double visible_tracking_time = 18;
      case 18: {
        if (tag == 145) {
         parse_visible_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visible_tracking_time_)));
          set_has_visible_tracking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_history_velocity;
        break;
      }

      // repeated .robosense.perception.Point3 history_velocity = 19;
      case 19: {
        if (tag == 154) {
         parse_history_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_history_velocity;
        if (input->ExpectTag(160)) goto parse_track_type;
        break;
      }

      // optional .robosense.perception.Perceptron.Type track_type = 20;
      case 20: {
        if (tag == 160) {
         parse_track_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::robosense::perception::Perceptron_Type_IsValid(value)) {
            set_track_type(static_cast< ::robosense::perception::Perceptron_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_type;
        break;
      }

      // optional .robosense.perception.Perceptron.Type type = 21;
      case 21: {
        if (tag == 168) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::robosense::perception::Perceptron_Type_IsValid(value)) {
            set_type(static_cast< ::robosense::perception::Perceptron_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_type_confidence;
        break;
      }

      // optional float type_confidence = 22;
      case 22: {
        if (tag == 181) {
         parse_type_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_confidence_)));
          set_has_type_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_is_background;
        break;
      }

      // optional bool is_background = 23;
      case 23: {
        if (tag == 184) {
         parse_is_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_background_)));
          set_has_is_background();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_polygon_point;
        break;
      }

      // repeated .robosense.perception.Point3 polygon_point = 24;
      case 24: {
        if (tag == 194) {
         parse_polygon_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_polygon_point;
        if (input->ExpectTag(202)) goto parse_trajectory;
        break;
      }

      // repeated .robosense.perception.Point3 trajectory = 25;
      case 25: {
        if (tag == 202) {
         parse_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_trajectory;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosense.perception.Perceptron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosense.perception.Perceptron)
  return false;
#undef DO_
}

void Perceptron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosense.perception.Perceptron)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .robosense.perception.Point3 location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->location(), output);
  }

  // optional float length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->length(), output);
  }

  // optional float width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width(), output);
  }

  // optional float height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional .robosense.perception.Point3 direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->direction(), output);
  }

  // optional float yaw = 8;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yaw(), output);
  }

  // optional .robosense.perception.Point3 nearest_point = 9;
  if (has_nearest_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nearest_point(), output);
  }

  // repeated .robosense.perception.Point3 box_corners = 10;
  for (int i = 0; i < this->box_corners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->box_corners(i), output);
  }

  // optional bool is_tracking_success = 11;
  if (has_is_tracking_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_tracking_success(), output);
  }

  // optional .robosense.perception.Point3 velocity = 12;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->velocity(), output);
  }

  // optional .robosense.perception.Point3 acceleration = 13;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->acceleration(), output);
  }

  // optional float angular_velocity = 14;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->angular_velocity(), output);
  }

  // optional float association_score = 15;
  if (has_association_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->association_score(), output);
  }

  // optional float tracker_robustness = 16;
  if (has_tracker_robustness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tracker_robustness(), output);
  }

  // optional double tracking_time = 17;
  if (has_tracking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->tracking_time(), output);
  }

  // optional double visible_tracking_time = 18;
  if (has_visible_tracking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->visible_tracking_time(), output);
  }

  // repeated .robosense.perception.Point3 history_velocity = 19;
  for (int i = 0; i < this->history_velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->history_velocity(i), output);
  }

  // optional .robosense.perception.Perceptron.Type track_type = 20;
  if (has_track_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->track_type(), output);
  }

  // optional .robosense.perception.Perceptron.Type type = 21;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->type(), output);
  }

  // optional float type_confidence = 22;
  if (has_type_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->type_confidence(), output);
  }

  // optional bool is_background = 23;
  if (has_is_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_background(), output);
  }

  // repeated .robosense.perception.Point3 polygon_point = 24;
  for (int i = 0; i < this->polygon_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->polygon_point(i), output);
  }

  // repeated .robosense.perception.Point3 trajectory = 25;
  for (int i = 0; i < this->trajectory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->trajectory(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robosense.perception.Perceptron)
}

::google::protobuf::uint8* Perceptron::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robosense.perception.Perceptron)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .robosense.perception.Point3 location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->location(), target);
  }

  // optional float length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->length(), target);
  }

  // optional float width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width(), target);
  }

  // optional float height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional .robosense.perception.Point3 direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->direction(), target);
  }

  // optional float yaw = 8;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yaw(), target);
  }

  // optional .robosense.perception.Point3 nearest_point = 9;
  if (has_nearest_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->nearest_point(), target);
  }

  // repeated .robosense.perception.Point3 box_corners = 10;
  for (int i = 0; i < this->box_corners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->box_corners(i), target);
  }

  // optional bool is_tracking_success = 11;
  if (has_is_tracking_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_tracking_success(), target);
  }

  // optional .robosense.perception.Point3 velocity = 12;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->velocity(), target);
  }

  // optional .robosense.perception.Point3 acceleration = 13;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->acceleration(), target);
  }

  // optional float angular_velocity = 14;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->angular_velocity(), target);
  }

  // optional float association_score = 15;
  if (has_association_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->association_score(), target);
  }

  // optional float tracker_robustness = 16;
  if (has_tracker_robustness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tracker_robustness(), target);
  }

  // optional double tracking_time = 17;
  if (has_tracking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->tracking_time(), target);
  }

  // optional double visible_tracking_time = 18;
  if (has_visible_tracking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->visible_tracking_time(), target);
  }

  // repeated .robosense.perception.Point3 history_velocity = 19;
  for (int i = 0; i < this->history_velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->history_velocity(i), target);
  }

  // optional .robosense.perception.Perceptron.Type track_type = 20;
  if (has_track_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->track_type(), target);
  }

  // optional .robosense.perception.Perceptron.Type type = 21;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->type(), target);
  }

  // optional float type_confidence = 22;
  if (has_type_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->type_confidence(), target);
  }

  // optional bool is_background = 23;
  if (has_is_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_background(), target);
  }

  // repeated .robosense.perception.Point3 polygon_point = 24;
  for (int i = 0; i < this->polygon_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->polygon_point(i), target);
  }

  // repeated .robosense.perception.Point3 trajectory = 25;
  for (int i = 0; i < this->trajectory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->trajectory(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosense.perception.Perceptron)
  return target;
}

int Perceptron::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .robosense.perception.Point3 location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional float length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional float width = 5;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 6;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional .robosense.perception.Point3 direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional float yaw = 8;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .robosense.perception.Point3 nearest_point = 9;
    if (has_nearest_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nearest_point());
    }

    // optional bool is_tracking_success = 11;
    if (has_is_tracking_success()) {
      total_size += 1 + 1;
    }

    // optional .robosense.perception.Point3 velocity = 12;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional .robosense.perception.Point3 acceleration = 13;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // optional float angular_velocity = 14;
    if (has_angular_velocity()) {
      total_size += 1 + 4;
    }

    // optional float association_score = 15;
    if (has_association_score()) {
      total_size += 1 + 4;
    }

    // optional float tracker_robustness = 16;
    if (has_tracker_robustness()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double tracking_time = 17;
    if (has_tracking_time()) {
      total_size += 2 + 8;
    }

    // optional double visible_tracking_time = 18;
    if (has_visible_tracking_time()) {
      total_size += 2 + 8;
    }

    // optional .robosense.perception.Perceptron.Type track_type = 20;
    if (has_track_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->track_type());
    }

    // optional .robosense.perception.Perceptron.Type type = 21;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float type_confidence = 22;
    if (has_type_confidence()) {
      total_size += 2 + 4;
    }

    // optional bool is_background = 23;
    if (has_is_background()) {
      total_size += 2 + 1;
    }

  }
  // repeated .robosense.perception.Point3 box_corners = 10;
  total_size += 1 * this->box_corners_size();
  for (int i = 0; i < this->box_corners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->box_corners(i));
  }

  // repeated .robosense.perception.Point3 history_velocity = 19;
  total_size += 2 * this->history_velocity_size();
  for (int i = 0; i < this->history_velocity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_velocity(i));
  }

  // repeated .robosense.perception.Point3 polygon_point = 24;
  total_size += 2 * this->polygon_point_size();
  for (int i = 0; i < this->polygon_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon_point(i));
  }

  // repeated .robosense.perception.Point3 trajectory = 25;
  total_size += 2 * this->trajectory_size();
  for (int i = 0; i < this->trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Perceptron::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Perceptron* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Perceptron*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Perceptron::MergeFrom(const Perceptron& from) {
  GOOGLE_CHECK_NE(&from, this);
  box_corners_.MergeFrom(from.box_corners_);
  history_velocity_.MergeFrom(from.history_velocity_);
  polygon_point_.MergeFrom(from.polygon_point_);
  trajectory_.MergeFrom(from.trajectory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_location()) {
      mutable_location()->::robosense::perception::Point3::MergeFrom(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_direction()) {
      mutable_direction()->::robosense::perception::Point3::MergeFrom(from.direction());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nearest_point()) {
      mutable_nearest_point()->::robosense::perception::Point3::MergeFrom(from.nearest_point());
    }
    if (from.has_is_tracking_success()) {
      set_is_tracking_success(from.is_tracking_success());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::robosense::perception::Point3::MergeFrom(from.velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::robosense::perception::Point3::MergeFrom(from.acceleration());
    }
    if (from.has_angular_velocity()) {
      set_angular_velocity(from.angular_velocity());
    }
    if (from.has_association_score()) {
      set_association_score(from.association_score());
    }
    if (from.has_tracker_robustness()) {
      set_tracker_robustness(from.tracker_robustness());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tracking_time()) {
      set_tracking_time(from.tracking_time());
    }
    if (from.has_visible_tracking_time()) {
      set_visible_tracking_time(from.visible_tracking_time());
    }
    if (from.has_track_type()) {
      set_track_type(from.track_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_confidence()) {
      set_type_confidence(from.type_confidence());
    }
    if (from.has_is_background()) {
      set_is_background(from.is_background());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Perceptron::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Perceptron::CopyFrom(const Perceptron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perceptron::IsInitialized() const {

  return true;
}

void Perceptron::Swap(Perceptron* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(id_, other->id_);
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(direction_, other->direction_);
    std::swap(yaw_, other->yaw_);
    std::swap(nearest_point_, other->nearest_point_);
    box_corners_.Swap(&other->box_corners_);
    std::swap(is_tracking_success_, other->is_tracking_success_);
    std::swap(velocity_, other->velocity_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(angular_velocity_, other->angular_velocity_);
    std::swap(association_score_, other->association_score_);
    std::swap(tracker_robustness_, other->tracker_robustness_);
    std::swap(tracking_time_, other->tracking_time_);
    std::swap(visible_tracking_time_, other->visible_tracking_time_);
    history_velocity_.Swap(&other->history_velocity_);
    std::swap(track_type_, other->track_type_);
    std::swap(type_, other->type_);
    std::swap(type_confidence_, other->type_confidence_);
    std::swap(is_background_, other->is_background_);
    polygon_point_.Swap(&other->polygon_point_);
    trajectory_.Swap(&other->trajectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Perceptron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Perceptron_descriptor_;
  metadata.reflection = Perceptron_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerceptronSet::kPerceptronFieldNumber;
#endif  // !_MSC_VER

PerceptronSet::PerceptronSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosense.perception.PerceptronSet)
}

void PerceptronSet::InitAsDefaultInstance() {
}

PerceptronSet::PerceptronSet(const PerceptronSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robosense.perception.PerceptronSet)
}

void PerceptronSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerceptronSet::~PerceptronSet() {
  // @@protoc_insertion_point(destructor:robosense.perception.PerceptronSet)
  SharedDtor();
}

void PerceptronSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerceptronSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptronSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptronSet_descriptor_;
}

const PerceptronSet& PerceptronSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perceptron_2eproto();
  return *default_instance_;
}

PerceptronSet* PerceptronSet::default_instance_ = NULL;

PerceptronSet* PerceptronSet::New() const {
  return new PerceptronSet;
}

void PerceptronSet::Clear() {
  perceptron_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerceptronSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosense.perception.PerceptronSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robosense.perception.Perceptron perceptron = 1;
      case 1: {
        if (tag == 10) {
         parse_perceptron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perceptron()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_perceptron;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosense.perception.PerceptronSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosense.perception.PerceptronSet)
  return false;
#undef DO_
}

void PerceptronSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosense.perception.PerceptronSet)
  // repeated .robosense.perception.Perceptron perceptron = 1;
  for (int i = 0; i < this->perceptron_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perceptron(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robosense.perception.PerceptronSet)
}

::google::protobuf::uint8* PerceptronSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robosense.perception.PerceptronSet)
  // repeated .robosense.perception.Perceptron perceptron = 1;
  for (int i = 0; i < this->perceptron_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->perceptron(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosense.perception.PerceptronSet)
  return target;
}

int PerceptronSet::ByteSize() const {
  int total_size = 0;

  // repeated .robosense.perception.Perceptron perceptron = 1;
  total_size += 1 * this->perceptron_size();
  for (int i = 0; i < this->perceptron_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->perceptron(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptronSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerceptronSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerceptronSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerceptronSet::MergeFrom(const PerceptronSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  perceptron_.MergeFrom(from.perceptron_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerceptronSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptronSet::CopyFrom(const PerceptronSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptronSet::IsInitialized() const {

  return true;
}

void PerceptronSet::Swap(PerceptronSet* other) {
  if (other != this) {
    perceptron_.Swap(&other->perceptron_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerceptronSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptronSet_descriptor_;
  metadata.reflection = PerceptronSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace robosense

// @@protoc_insertion_point(global_scope)
